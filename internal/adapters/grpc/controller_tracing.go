// Code generated by tracing-gen. DO NOT EDIT.

package grpc

import (
	"context"
	"github.com/intezya/auth_service/internal/application/service"
	tracer "github.com/intezya/auth_service/pkg/tracer"
	authpb "github.com/intezya/auth_service/protos/go/auth"
)

type authControllerWithTracing struct {
	wrapped authpb.AuthServiceServer
	authpb.UnimplementedAuthServiceServer
}

func NewAuthControllerWithTracing(authService service.AuthService) authpb.AuthServiceServer {
	wrapped := NewAuthController(authService)
	return &authControllerWithTracing{
		wrapped: wrapped,
	}
}

func (t *authControllerWithTracing) Register(ctx context.Context, request *authpb.AuthenticationRequest) (*authpb.Empty, error) {
	ctx, span := tracer.StartSpan(ctx, "AuthController.Register")
	defer span.End()

	return t.wrapped.Register(ctx, request)
}

func (t *authControllerWithTracing) Login(ctx context.Context, request *authpb.AuthenticationRequest) (*authpb.TokenResponse, error) {
	ctx, span := tracer.StartSpan(ctx, "AuthController.Login")
	defer span.End()

	return t.wrapped.Login(ctx, request)
}

func (t *authControllerWithTracing) VerifyToken(ctx context.Context, request *authpb.VerifyTokenRequest) (*authpb.VerifyTokenResponse, error) {
	ctx, span := tracer.StartSpan(ctx, "AuthController.VerifyToken")
	defer span.End()

	return t.wrapped.VerifyToken(ctx, request)
}

func (t *authControllerWithTracing) BanAccount(ctx context.Context, request *authpb.BanAccountRequest) (*authpb.Empty, error) {
	ctx, span := tracer.StartSpan(ctx, "AuthController.BanAccount")
	defer span.End()

	return t.wrapped.BanAccount(ctx, request)
}
