// Code generated by tracing-gen. DO NOT EDIT.

package service

import (
	"context"
	"github.com/intezya/auth_service/internal/domain/dto"
	tracer "github.com/intezya/auth_service/internal/infrastructure/metrics/tracer"
)

type authServiceWithTracing struct {
	wrapped AuthService
}

func NewAuthServiceWithTracing(wrapped AuthService) AuthService {
	return &authServiceWithTracing{
		wrapped: wrapped,
	}
}

func (t *authServiceWithTracing) Register(ctx context.Context, username string, password string, hardwareId string) error {
	ctx, span := tracer.StartSpan(ctx, "AuthService.Register")
	defer span.End()

	return t.wrapped.Register(ctx, username, password, hardwareId)
}

func (t *authServiceWithTracing) Login(ctx context.Context, username string, password string, hardwareId string) (*dto.AuthenticationResult, error) {
	ctx, span := tracer.StartSpan(ctx, "AuthService.Login")
	defer span.End()

	return t.wrapped.Login(ctx, username, password, hardwareId)
}

func (t *authServiceWithTracing) VerifyToken(ctx context.Context, token string) (*dto.DataFromToken, error) {
	ctx, span := tracer.StartSpan(ctx, "AuthService.VerifyToken")
	defer span.End()

	return t.wrapped.VerifyToken(ctx, token)
}

func (t *authServiceWithTracing) BanAccount(ctx context.Context, subject int, banUntilUnix int, banReason string) error {
	ctx, span := tracer.StartSpan(ctx, "AuthService.BanAccount")
	defer span.End()

	return t.wrapped.BanAccount(ctx, subject, banUntilUnix, banReason)
}
