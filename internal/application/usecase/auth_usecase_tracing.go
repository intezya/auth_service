// Code generated by tracing-gen. DO NOT EDIT.

package usecase

import (
	"context"
	"github.com/intezya/auth_service/internal/domain/dto"
	tracer "github.com/intezya/auth_service/pkg/tracer"
)

type authUseCaseWithTracing struct {
	wrapped AuthUseCase
}

func NewAuthUseCaseWithTracing(wrapped AuthUseCase) AuthUseCase {
	return &authUseCaseWithTracing{
		wrapped: wrapped,
	}
}

func (t *authUseCaseWithTracing) Register(ctx context.Context, cmd *RegisterCommand) error {
	ctx, span := tracer.StartSpan(ctx, "AuthUseCase.Register")
	defer span.End()

	return t.wrapped.Register(ctx, cmd)
}

func (t *authUseCaseWithTracing) Login(ctx context.Context, cmd *LoginCommand) (*LoginResult, error) {
	ctx, span := tracer.StartSpan(ctx, "AuthUseCase.Login")
	defer span.End()

	return t.wrapped.Login(ctx, cmd)
}

func (t *authUseCaseWithTracing) VerifyToken(ctx context.Context, cmd *VerifyTokenCommand) (*dto.TokenData, error) {
	ctx, span := tracer.StartSpan(ctx, "AuthUseCase.VerifyToken")
	defer span.End()

	return t.wrapped.VerifyToken(ctx, cmd)
}

func (t *authUseCaseWithTracing) BanAccount(ctx context.Context, cmd *BanAccountCommand) error {
	ctx, span := tracer.StartSpan(ctx, "AuthUseCase.BanAccount")
	defer span.End()

	return t.wrapped.BanAccount(ctx, cmd)
}
