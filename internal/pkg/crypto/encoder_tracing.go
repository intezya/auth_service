// Code generated by tracing-gen. DO NOT EDIT.

package crypto

import (
	"context"
	"github.com/intezya/auth_service/internal/domain/service"
	tracer "github.com/intezya/auth_service/pkg/tracer"
)

type passwordEncoderWithTracing struct {
	wrapped service.PasswordEncoder
}

func NewPasswordEncoderWithTracing(config Config) service.PasswordEncoder {
	wrapped := NewPasswordEncoder(config)
	return &passwordEncoderWithTracing{
		wrapped: wrapped,
	}
}

func (t *passwordEncoderWithTracing) EncodePassword(ctx context.Context, password string) string {
	ctx, span := tracer.StartSpan(ctx, "PasswordEncoder.EncodePassword")
	defer span.End()

	return t.wrapped.EncodePassword(ctx, password)
}

func (t *passwordEncoderWithTracing) VerifyPassword(ctx context.Context, password string, hash string) bool {
	ctx, span := tracer.StartSpan(ctx, "PasswordEncoder.VerifyPassword")
	defer span.End()

	return t.wrapped.VerifyPassword(ctx, password, hash)
}

func (t *passwordEncoderWithTracing) EncodeHardwareID(ctx context.Context, hardwareID string) string {
	ctx, span := tracer.StartSpan(ctx, "PasswordEncoder.EncodeHardwareID")
	defer span.End()

	return t.wrapped.EncodeHardwareID(ctx, hardwareID)
}

func (t *passwordEncoderWithTracing) VerifyHardwareID(ctx context.Context, hardwareID string, hash string) bool {
	ctx, span := tracer.StartSpan(ctx, "PasswordEncoder.VerifyHardwareID")
	defer span.End()

	return t.wrapped.VerifyHardwareID(ctx, hardwareID, hash)
}
