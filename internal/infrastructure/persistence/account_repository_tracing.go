// Code generated by tracing-gen. DO NOT EDIT.

package persistence

import (
	"context"
	"github.com/intezya/auth_service/internal/domain/dto"
	repository "github.com/intezya/auth_service/internal/domain/repository"
	tracer "github.com/intezya/auth_service/internal/infrastructure/metrics/tracer"
	"time"
)

type accountRepositoryWithTracing struct {
	wrapped repository.AccountRepository
}

func NewAccountRepositoryWithTracing(wrapped repository.AccountRepository) repository.AccountRepository {
	return &accountRepositoryWithTracing{
		wrapped: wrapped,
	}
}

func (t *accountRepositoryWithTracing) Create(ctx context.Context, username string, password string, hardwareId string) (*dto.AccountDTO, error) {
	ctx, span := tracer.StartSpan(ctx, "AccountRepository.Create")
	defer span.End()

	return t.wrapped.Create(ctx, username, password, hardwareId)
}

func (t *accountRepositoryWithTracing) FindByID(ctx context.Context, id int) (*dto.AccountDTO, error) {
	ctx, span := tracer.StartSpan(ctx, "AccountRepository.FindByID")
	defer span.End()

	return t.wrapped.FindByID(ctx, id)
}

func (t *accountRepositoryWithTracing) FindByLowerUsername(ctx context.Context, username string) (*dto.AccountDTO, error) {
	ctx, span := tracer.StartSpan(ctx, "AccountRepository.FindByLowerUsername")
	defer span.End()

	return t.wrapped.FindByLowerUsername(ctx, username)
}

func (t *accountRepositoryWithTracing) UpdateHardwareIDByID(ctx context.Context, id int, hardwareId string) error {
	ctx, span := tracer.StartSpan(ctx, "AccountRepository.UpdateHardwareIDByID")
	defer span.End()

	return t.wrapped.UpdateHardwareIDByID(ctx, id, hardwareId)
}

func (t *accountRepositoryWithTracing) UpdateBannedUntilBannedReasonByID(ctx context.Context, id int, bannedUntil *time.Time, banReason *string) error {
	ctx, span := tracer.StartSpan(ctx, "AccountRepository.UpdateBannedUntilBannedReasonByID")
	defer span.End()

	return t.wrapped.UpdateBannedUntilBannedReasonByID(ctx, id, bannedUntil, banReason)
}
