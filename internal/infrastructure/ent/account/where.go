// Code generated by ent, DO NOT EDIT.

package account

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/intezya/auth_service/internal/domain/access_level"
	"github.com/intezya/auth_service/internal/infrastructure/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldID, id))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldUsername, v))
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldPassword, v))
}

// HardwareID applies equality check predicate on the "hardware_id" field. It's identical to HardwareIDEQ.
func HardwareID(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldHardwareID, v))
}

// AccessLevel applies equality check predicate on the "access_level" field. It's identical to AccessLevelEQ.
func AccessLevel(v access_level.AccessLevel) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldAccessLevel, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldCreatedAt, v))
}

// BannedUntil applies equality check predicate on the "banned_until" field. It's identical to BannedUntilEQ.
func BannedUntil(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldBannedUntil, v))
}

// BanReason applies equality check predicate on the "ban_reason" field. It's identical to BanReasonEQ.
func BanReason(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldBanReason, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.Account {
	return predicate.Account(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.Account {
	return predicate.Account(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.Account {
	return predicate.Account(sql.FieldContainsFold(FieldUsername, v))
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldPassword, v))
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldPassword, vs...))
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldPassword, vs...))
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldPassword, v))
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldPassword, v))
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldPassword, v))
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldPassword, v))
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.Account {
	return predicate.Account(sql.FieldContains(FieldPassword, v))
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasPrefix(FieldPassword, v))
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasSuffix(FieldPassword, v))
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.Account {
	return predicate.Account(sql.FieldEqualFold(FieldPassword, v))
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.Account {
	return predicate.Account(sql.FieldContainsFold(FieldPassword, v))
}

// HardwareIDEQ applies the EQ predicate on the "hardware_id" field.
func HardwareIDEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldHardwareID, v))
}

// HardwareIDNEQ applies the NEQ predicate on the "hardware_id" field.
func HardwareIDNEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldHardwareID, v))
}

// HardwareIDIn applies the In predicate on the "hardware_id" field.
func HardwareIDIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldHardwareID, vs...))
}

// HardwareIDNotIn applies the NotIn predicate on the "hardware_id" field.
func HardwareIDNotIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldHardwareID, vs...))
}

// HardwareIDGT applies the GT predicate on the "hardware_id" field.
func HardwareIDGT(v string) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldHardwareID, v))
}

// HardwareIDGTE applies the GTE predicate on the "hardware_id" field.
func HardwareIDGTE(v string) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldHardwareID, v))
}

// HardwareIDLT applies the LT predicate on the "hardware_id" field.
func HardwareIDLT(v string) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldHardwareID, v))
}

// HardwareIDLTE applies the LTE predicate on the "hardware_id" field.
func HardwareIDLTE(v string) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldHardwareID, v))
}

// HardwareIDContains applies the Contains predicate on the "hardware_id" field.
func HardwareIDContains(v string) predicate.Account {
	return predicate.Account(sql.FieldContains(FieldHardwareID, v))
}

// HardwareIDHasPrefix applies the HasPrefix predicate on the "hardware_id" field.
func HardwareIDHasPrefix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasPrefix(FieldHardwareID, v))
}

// HardwareIDHasSuffix applies the HasSuffix predicate on the "hardware_id" field.
func HardwareIDHasSuffix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasSuffix(FieldHardwareID, v))
}

// HardwareIDIsNil applies the IsNil predicate on the "hardware_id" field.
func HardwareIDIsNil() predicate.Account {
	return predicate.Account(sql.FieldIsNull(FieldHardwareID))
}

// HardwareIDNotNil applies the NotNil predicate on the "hardware_id" field.
func HardwareIDNotNil() predicate.Account {
	return predicate.Account(sql.FieldNotNull(FieldHardwareID))
}

// HardwareIDEqualFold applies the EqualFold predicate on the "hardware_id" field.
func HardwareIDEqualFold(v string) predicate.Account {
	return predicate.Account(sql.FieldEqualFold(FieldHardwareID, v))
}

// HardwareIDContainsFold applies the ContainsFold predicate on the "hardware_id" field.
func HardwareIDContainsFold(v string) predicate.Account {
	return predicate.Account(sql.FieldContainsFold(FieldHardwareID, v))
}

// AccessLevelEQ applies the EQ predicate on the "access_level" field.
func AccessLevelEQ(v access_level.AccessLevel) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldAccessLevel, v))
}

// AccessLevelNEQ applies the NEQ predicate on the "access_level" field.
func AccessLevelNEQ(v access_level.AccessLevel) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldAccessLevel, v))
}

// AccessLevelIn applies the In predicate on the "access_level" field.
func AccessLevelIn(vs ...access_level.AccessLevel) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldAccessLevel, vs...))
}

// AccessLevelNotIn applies the NotIn predicate on the "access_level" field.
func AccessLevelNotIn(vs ...access_level.AccessLevel) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldAccessLevel, vs...))
}

// AccessLevelGT applies the GT predicate on the "access_level" field.
func AccessLevelGT(v access_level.AccessLevel) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldAccessLevel, v))
}

// AccessLevelGTE applies the GTE predicate on the "access_level" field.
func AccessLevelGTE(v access_level.AccessLevel) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldAccessLevel, v))
}

// AccessLevelLT applies the LT predicate on the "access_level" field.
func AccessLevelLT(v access_level.AccessLevel) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldAccessLevel, v))
}

// AccessLevelLTE applies the LTE predicate on the "access_level" field.
func AccessLevelLTE(v access_level.AccessLevel) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldAccessLevel, v))
}

// AccessLevelContains applies the Contains predicate on the "access_level" field.
func AccessLevelContains(v access_level.AccessLevel) predicate.Account {
	vc := v.String()
	return predicate.Account(sql.FieldContains(FieldAccessLevel, vc))
}

// AccessLevelHasPrefix applies the HasPrefix predicate on the "access_level" field.
func AccessLevelHasPrefix(v access_level.AccessLevel) predicate.Account {
	vc := v.String()
	return predicate.Account(sql.FieldHasPrefix(FieldAccessLevel, vc))
}

// AccessLevelHasSuffix applies the HasSuffix predicate on the "access_level" field.
func AccessLevelHasSuffix(v access_level.AccessLevel) predicate.Account {
	vc := v.String()
	return predicate.Account(sql.FieldHasSuffix(FieldAccessLevel, vc))
}

// AccessLevelEqualFold applies the EqualFold predicate on the "access_level" field.
func AccessLevelEqualFold(v access_level.AccessLevel) predicate.Account {
	vc := v.String()
	return predicate.Account(sql.FieldEqualFold(FieldAccessLevel, vc))
}

// AccessLevelContainsFold applies the ContainsFold predicate on the "access_level" field.
func AccessLevelContainsFold(v access_level.AccessLevel) predicate.Account {
	vc := v.String()
	return predicate.Account(sql.FieldContainsFold(FieldAccessLevel, vc))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldCreatedAt, v))
}

// BannedUntilEQ applies the EQ predicate on the "banned_until" field.
func BannedUntilEQ(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldBannedUntil, v))
}

// BannedUntilNEQ applies the NEQ predicate on the "banned_until" field.
func BannedUntilNEQ(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldBannedUntil, v))
}

// BannedUntilIn applies the In predicate on the "banned_until" field.
func BannedUntilIn(vs ...time.Time) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldBannedUntil, vs...))
}

// BannedUntilNotIn applies the NotIn predicate on the "banned_until" field.
func BannedUntilNotIn(vs ...time.Time) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldBannedUntil, vs...))
}

// BannedUntilGT applies the GT predicate on the "banned_until" field.
func BannedUntilGT(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldBannedUntil, v))
}

// BannedUntilGTE applies the GTE predicate on the "banned_until" field.
func BannedUntilGTE(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldBannedUntil, v))
}

// BannedUntilLT applies the LT predicate on the "banned_until" field.
func BannedUntilLT(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldBannedUntil, v))
}

// BannedUntilLTE applies the LTE predicate on the "banned_until" field.
func BannedUntilLTE(v time.Time) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldBannedUntil, v))
}

// BannedUntilIsNil applies the IsNil predicate on the "banned_until" field.
func BannedUntilIsNil() predicate.Account {
	return predicate.Account(sql.FieldIsNull(FieldBannedUntil))
}

// BannedUntilNotNil applies the NotNil predicate on the "banned_until" field.
func BannedUntilNotNil() predicate.Account {
	return predicate.Account(sql.FieldNotNull(FieldBannedUntil))
}

// BanReasonEQ applies the EQ predicate on the "ban_reason" field.
func BanReasonEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldEQ(FieldBanReason, v))
}

// BanReasonNEQ applies the NEQ predicate on the "ban_reason" field.
func BanReasonNEQ(v string) predicate.Account {
	return predicate.Account(sql.FieldNEQ(FieldBanReason, v))
}

// BanReasonIn applies the In predicate on the "ban_reason" field.
func BanReasonIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldIn(FieldBanReason, vs...))
}

// BanReasonNotIn applies the NotIn predicate on the "ban_reason" field.
func BanReasonNotIn(vs ...string) predicate.Account {
	return predicate.Account(sql.FieldNotIn(FieldBanReason, vs...))
}

// BanReasonGT applies the GT predicate on the "ban_reason" field.
func BanReasonGT(v string) predicate.Account {
	return predicate.Account(sql.FieldGT(FieldBanReason, v))
}

// BanReasonGTE applies the GTE predicate on the "ban_reason" field.
func BanReasonGTE(v string) predicate.Account {
	return predicate.Account(sql.FieldGTE(FieldBanReason, v))
}

// BanReasonLT applies the LT predicate on the "ban_reason" field.
func BanReasonLT(v string) predicate.Account {
	return predicate.Account(sql.FieldLT(FieldBanReason, v))
}

// BanReasonLTE applies the LTE predicate on the "ban_reason" field.
func BanReasonLTE(v string) predicate.Account {
	return predicate.Account(sql.FieldLTE(FieldBanReason, v))
}

// BanReasonContains applies the Contains predicate on the "ban_reason" field.
func BanReasonContains(v string) predicate.Account {
	return predicate.Account(sql.FieldContains(FieldBanReason, v))
}

// BanReasonHasPrefix applies the HasPrefix predicate on the "ban_reason" field.
func BanReasonHasPrefix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasPrefix(FieldBanReason, v))
}

// BanReasonHasSuffix applies the HasSuffix predicate on the "ban_reason" field.
func BanReasonHasSuffix(v string) predicate.Account {
	return predicate.Account(sql.FieldHasSuffix(FieldBanReason, v))
}

// BanReasonIsNil applies the IsNil predicate on the "ban_reason" field.
func BanReasonIsNil() predicate.Account {
	return predicate.Account(sql.FieldIsNull(FieldBanReason))
}

// BanReasonNotNil applies the NotNil predicate on the "ban_reason" field.
func BanReasonNotNil() predicate.Account {
	return predicate.Account(sql.FieldNotNull(FieldBanReason))
}

// BanReasonEqualFold applies the EqualFold predicate on the "ban_reason" field.
func BanReasonEqualFold(v string) predicate.Account {
	return predicate.Account(sql.FieldEqualFold(FieldBanReason, v))
}

// BanReasonContainsFold applies the ContainsFold predicate on the "ban_reason" field.
func BanReasonContainsFold(v string) predicate.Account {
	return predicate.Account(sql.FieldContainsFold(FieldBanReason, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Account) predicate.Account {
	return predicate.Account(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Account) predicate.Account {
	return predicate.Account(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Account) predicate.Account {
	return predicate.Account(sql.NotPredicates(p))
}
