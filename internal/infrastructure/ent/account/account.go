// Code generated by ent, DO NOT EDIT.

package account

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/intezya/auth_service/internal/domain/access_level"
)

const (
	// Label holds the string label denoting the account type in the database.
	Label = "account"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldHardwareID holds the string denoting the hardware_id field in the database.
	FieldHardwareID = "hardware_id"
	// FieldAccessLevel holds the string denoting the access_level field in the database.
	FieldAccessLevel = "access_level"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldBannedUntil holds the string denoting the banned_until field in the database.
	FieldBannedUntil = "banned_until"
	// FieldBanReason holds the string denoting the ban_reason field in the database.
	FieldBanReason = "ban_reason"
	// Table holds the table name of the account in the database.
	Table = "accounts"
)

// Columns holds all SQL columns for account fields.
var Columns = []string{
	FieldID,
	FieldUsername,
	FieldPassword,
	FieldHardwareID,
	FieldAccessLevel,
	FieldCreatedAt,
	FieldBannedUntil,
	FieldBanReason,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	UsernameValidator func(string) error
	// PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	PasswordValidator func(string) error
	// DefaultAccessLevel holds the default value on creation for the "access_level" field.
	DefaultAccessLevel func() access_level.AccessLevel
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the Account queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByHardwareID orders the results by the hardware_id field.
func ByHardwareID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHardwareID, opts...).ToFunc()
}

// ByAccessLevel orders the results by the access_level field.
func ByAccessLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccessLevel, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByBannedUntil orders the results by the banned_until field.
func ByBannedUntil(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBannedUntil, opts...).ToFunc()
}

// ByBanReason orders the results by the ban_reason field.
func ByBanReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBanReason, opts...).ToFunc()
}
